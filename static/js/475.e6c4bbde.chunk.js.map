{"version":3,"file":"static/js/475.e6c4bbde.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","redux/contacts/contactsSelectors.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/views/ContactsView/ContactsView.module.css?919f","views/ContactsView/ContactsView.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"ContactForm_input__Bl93P\",\"form__input\":\"ContactForm_form__input__VGD4-\",\"button\":\"ContactForm_button__eSwX9\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix';\nimport {\n  useAddContactMutation,\n  useGetContactsQuery,\n} from 'services/contactsApi';\n\nimport css from './ContactForm.module.css';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const [name, setName] = useState(INITIAL_STATE.name);\n  const [number, setNumber] = useState(INITIAL_STATE.number);\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n  const { data: contacts } = useGetContactsQuery();\n  const [addContact] = useAddContactMutation();\n\n  const onSubmit = event => {\n    event.preventDefault();\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return Notify.failure(`Contact '${name}' is already exist`);\n    }\n    const id = nanoid();\n    addContact({ id, name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName(INITIAL_STATE.name);\n    setNumber(INITIAL_STATE.number);\n  };\n\n  return (\n    <form className={css.input} onSubmit={onSubmit}>\n      <label htmlFor={nameInputId}>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        maxLength=\"40\"\n        required\n        value={name}\n        onChange={event => setName(event.target.value)}\n        id={nameInputId}\n        className={css.form__input}\n      />\n      <label htmlFor={numberInputId}>Number</label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        maxLength=\"12\"\n        required\n        value={number}\n        onChange={event => setNumber(event.target.value)}\n        id={numberInputId}\n        className={css.form__input}\n      />\n      <button type=\"submit\" className={css.button}>\n        Add Contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","export const getFilter = state => state.contactsReducer.filter;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"text\":\"ContactList_text__+NWAW\",\"button\":\"ContactList_button__7kL4l\"};","import PropTypes from 'prop-types';\nimport { useDeleteContactMutation } from 'services/contactsApi';\nimport css from './ContactList.module.css';\n\nconst ContactListItem = ({ id, name, number }) => {\n  const [deleteContact] = useDeleteContactMutation();\n  return (\n    <>\n      <li className={css.item} key={id}>\n        <span className={css.text}>\n          {name}: {number}\n        </span>\n        <button\n          className={css.button}\n          onClick={() => deleteContact(id)}\n        >\n          Delete\n        </button>\n      </li>\n    </>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactListItem;","import { useSelector } from 'react-redux';\nimport { getFilter } from 'redux/contacts/contactsSelectors';\nimport { useGetContactsQuery } from 'services/contactsApi';\nimport ContactListItem from './ContactListItem';\nimport Loader from 'components/Loader';\nimport PropTypes from 'prop-types';\nimport css from './ContactList.module.css';\n\nconst ContactList = () => {\n  const filter = useSelector(getFilter);\n\n  const { data: contacts, isFetching, isError } = useGetContactsQuery();\n\n  const filteredContacts =\n    contacts &&\n    contacts.filter(contact => contact.name.toLowerCase().includes(filter));\n\n  const isContactsEmpty = filteredContacts && filteredContacts.length > 0;\n\n  return (\n    <>\n      {isFetching && <Loader color={'#3f51b5'} size={32} />}\n      {isError && console.log(isError)}\n      {isContactsEmpty ? (\n        <ul className={css.list}>\n          {filteredContacts.map(({ id, name, number }) => (\n            <ContactListItem key={id} id={id} name={name} number={number} />\n          ))}\n        </ul>\n      ) : (\n        <ul className={css.list}>\n          <p>No contacts found...</p>\n        </ul>\n      )}\n    </>\n  );\n};\n\nContactList.propTypes = {\n  filteredContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Filter_container__L5eml\",\"input\":\"Filter_input__N7T3z\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/contacts/contactsSelectors';\nimport { filterContact } from 'redux/contacts/contactsActions';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  return (\n    <div className={css.container}>\n      <label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          name=\"filter\"\n          className={css.input}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Find contacts by name\"\n          placeholder=\"Enter search request here\"\n          value={filter}\n          onChange={event => dispatch(filterContact(event))}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"ContactsView_section__UJU9N\",\"title\":\"ContactsView_title__ATNZX\"};","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport css from './ContactsView.module.css';\n\nexport default function ContactsView() {\n  return (\n    <div className={css.section}>\n      <h1 className={css.title}>PHONEBOOK APP</h1>\n      <h2>Add new contact</h2>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","INITIAL_STATE","useState","name","setName","number","setNumber","nameInputId","numberInputId","contacts","useGetContactsQuery","data","useAddContactMutation","addContact","reset","className","css","onSubmit","event","preventDefault","find","contact","toLowerCase","Notify","htmlFor","type","pattern","title","maxLength","required","value","onChange","target","getFilter","state","contactsReducer","filter","useDeleteContactMutation","deleteContact","onClick","useSelector","isFetching","isError","filteredContacts","includes","isContactsEmpty","length","Loader","color","console","log","map","dispatch","useDispatch","placeholder","filterContact","ContactsView"],"sourceRoot":""}